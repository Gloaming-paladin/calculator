#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

#define MAX_EXERCISE_NUM 10000
#define MAX_EXERCISE_LEN 100
#define MAX_ANSWER_LEN 100

int exer_num;
char exercises[MAX_EXERCISE_NUM][MAX_EXERCISE_LEN];
char answers[MAX_EXERCISE_NUM][MAX_ANSWER_LEN];

void generate_exercise(int r) {
    int i, j, k;
    char temp[MAX_EXERCISE_LEN];
    srand(time(NULL));
    for (i = 0; i < exer_num; i++) {
        memset(temp, 0, MAX_EXERCISE_LEN);
        k = 0;
        if (rand() % 2 == 0) {
            int num = rand() % r + 1;
            sprintf(temp + k, "%d", num);
            k += strlen(temp + k);
        }
        else {
            int numerator = rand() % r + 1;
            int denominator = rand() % r + 1;
            if (numerator > denominator) {
                int t = numerator;
                numerator = denominator;
                denominator = t;
            }
            sprintf(temp + k, "%d/%d", numerator, denominator);
            k += strlen(temp + k);
        }
        for (j = 0; j < 3; j++) {
            char op = '+';
            if (rand() % 2 == 0) {
                op = '-';
            }
            else if (rand() % 2 == 0) {
                op = '*';
            }
            else {
                op = '/';
            }
            sprintf(temp + k, "%c", op);
            k += strlen(temp + k);
        }
        if (rand() % 2 == 0) {
            sprintf(temp + k, "(");
            k += strlen(temp + k);
        }
        for (j = 0; j < 3; j++) {
            char op = '+';
            if (rand() % 2 == 0) {
                op = '-';
            }
            else if (rand() % 2 == 0) {
                op = '*';
            }
            else {
                op = '/';
            }
            sprintf(temp + k, "%c", op);
            k += strlen(temp + k);
        }
        if (rand() % 2 == 0) {
            sprintf(temp + k, ")");
            k += strlen(temp + k);
        }
        exercises[i][0] = '\0';
        strcat(exercises[i], temp);
        strcat(exercises[i], " = ");
        double ans = 0.0; // 使用浮点数来保存答案
        if (strstr(temp, "/") != NULL) {
            char* p = strtok(temp, "/");
            ans = atof(p) / atof(strtok(NULL, "/"));
        }
        else {
            char* p = strtok(temp, "+-");
            ans = atof(p); // 使用 atof 函数将字符串转换为浮点数
            for (j = 0; j < 3; j++) {
                p = strtok(NULL, "+-");
                ans = ans + atof(p); // 使用 atof 函数将字符串转换为浮点数
            }
        }
        sprintf(answers[i], "%lf", ans);
    }
}

void check_answer() {
    int i = 0;
    double user_ans; // 保存用户的答案
    FILE* fp1, * fp2;
    double ans;
    fp1 = fopen("Exercises.txt", "r");
    fp2 = fopen("Answers.txt", "r");
    if (fp1 == NULL || fp2 == NULL) {
        printf("Error: cannot open file.\n");
        return;
    }
    while (!feof(fp1)) {
        fscanf(fp1, "%s", exercises[i]);
        fscanf(fp2, "%s", answers[i]);
        ans = atof(answers[i]);
        printf("%s ", exercises[i]);
        printf("Enter your answer: "); // 提示用户输入答案
        scanf("%lf", &user_ans); // 读取用户输入的答案
        if (fabs(ans - user_ans) < 0.0001) { // 使用 fabs 函数判断两个浮点数是否相等
            printf("Correct\n");
        }
        else {
            printf("Wrong\n");
        }
        i++;
    }
    fclose(fp1);
    fclose(fp2);
}

int main(int argc, char* argv[]) {
    int i;
    if (argc < 3) {
        printf("Usage: ./exercise -n <num> -r <range>\n");
        return 1;
    }
    for (i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-n") == 0) {
            exer_num = atoi(argv[i + 1]);
        }
        else if (strcmp(argv[i], "-r") == 0) {
            int r = atoi(argv[i + 1]);
            if (r <= 0) {
                printf("Error: range must be a positive integer.\n");
                return 1;
            }
            generate_exercise(r);
            break;
        }
        else {
            printf("Error: unknown option.\n");
            return 1;
        }
    }
    check_answer();
    return 0;
}
